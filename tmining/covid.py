# -*- coding: utf-8 -*-
#
# Created by Alex Molina
# April 2020
# 
# This project is licensed under the MIT License - see the LICENSE file for details.
# Copyright (c) 2020 Alejandro Molina Villegas
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), ".", ".."))
from tmining.utils import covid19, covid19_symptoms, covid19_sampling, covid19_comorbidities, explore_dir
import re
import simplejson as json


class MedNotesMiner(object):
    """Medical notes data miner for Covid-19 insights"""
    def __init__(self, text_utf8, covid19_db=None, symptoms_db=None, sampling_db=None, morbidities_db=None):
        super(MedNotesMiner, self).__init__()
        self.wikidata_url = 'https://www.wikidata.org/wiki/'
        self.text = text_utf8
        self.clues = {'texto': self.text}
        self.lower_text = self.text.lower()
        if not covid19_db:
            self.covid19_db = covid19()
        if not symptoms_db:
            self.symptoms_db = covid19_symptoms()
        if not sampling_db:
            self.sampling_db = covid19_sampling()
        if not morbidities_db:
            self.morbidities_db = covid19_comorbidities()

    def check_covid19(self, lower_case=True):
        """match covid-19 mentions"""
        self.clues['COVID-19'] = {}

        # seek for covid matches
        for (covid_key, covid_name) in self.covid19_db:
            #TODO: method argumen contex_size
            regex = r'((\w+\W+){0,5}\b'+covid_name+r'\b(\W+\w+){0,5})'
            for covid_mention in re.finditer(regex, self.lower_text):
                context_mention = '...'+(covid_mention.groups()[0]).replace('\n', ' ')+'...'
                covid_info = {'descripción': covid_name,
                              'mención': context_mention,
                              'wikidata': '{}{}'.format(self.wikidata_url, covid_key)}

                if not covid_key in self.clues['COVID-19']:
                    self.clues['COVID-19'][covid_key] = [covid_info]
                    continue

                self.clues['COVID-19'][covid_key].append(covid_info)

    def check_symptoms(self, lower_case=True):
        """match covid-19 symptoms"""
        self.clues['síntomas'] = {}

        # seek for symptoms matches
        for (sympt_key, sympt_name) in self.symptoms_db:
            #TODO: method argumen contex_size
            regex = r'((\w+\W+){0,5}\b'+sympt_name+r'\b(\W+\w+){0,5})'
            for sympt_mention in re.finditer(regex, self.lower_text):
                context_mention = '...'+(sympt_mention.groups()[0]).replace('\n', ' ')+'...'
                # NICETOHAVE: filter wikidata info selected
                # wikidict = get_entity_dict_from_api(sympt_key)
                # external_info = wikidict['claims'] if 'claims' in wikidict else ''
                sympt_info = {'descripción': sympt_name,
                              'mención': context_mention,
                              'wikidata': '{}{}'.format(self.wikidata_url, sympt_key)}

                if not sympt_key in self.clues['síntomas']:
                    self.clues['síntomas'][sympt_key] = [sympt_info]
                    continue

                self.clues['síntomas'][sympt_key].append(sympt_info)

    def check_comorbidities(self, lower_case=True):
        """match covid-19 comorbidities"""
        self.clues['comorbilidades'] = {}

        # seek for comorbidities matches
        for (comorbidity_key, comorbidity_name) in self.morbidities_db:
            #TODO: method argumen contex_size
            regex = r'((\w+\W+){0,5}\b'+comorbidity_name+r'\b(\W+\w+){0,5})'
            for morbid_mention in re.finditer(regex, self.lower_text):
                context_mention = '...'+(morbid_mention.groups()[0]).replace('\n', ' ')+'...'
                comorbidity_info = {'descripción': comorbidity_name,
                                    'mención': context_mention,
                                    'wikidata': '{}{}'.format(self.wikidata_url, comorbidity_key)}

                if not comorbidity_key in self.clues['comorbilidades']:
                    self.clues['comorbilidades'][comorbidity_key] = [comorbidity_info]
                    continue

                self.clues['comorbilidades'][comorbidity_key].append(comorbidity_info)

    def check_sampling(self):
        """match covid-19 sampling mentions"""
        self.clues['muestreos'] = []

        # seek for sampling matches
        for sampling_cueword in self.sampling_db:
            regex = r'((\w+\W+){0,5}\b'+sampling_cueword+r'\b(\W+\w+){0,5})'
            for samp_mention in re.finditer(regex, self.lower_text):
                context_mention = '...'+(samp_mention.groups()[0]).replace('\n', ' ')+'...'
                self.clues['muestreos'].append({'mención': context_mention})


class CovidJsonParser(object):
    """Parse JSON symptoms registers generated by MedNotesMiner"""
    def __init__(self):
        # TODO: add 'fecha' as second column and all symptoms
        super(CovidJsonParser, self).__init__()
        self.canonical_symptnames = {'Q38933': 'fiebre',
                                     'Q35805': 'tos',
                                     'Q767485': 'insuficiencia_respiratoria',
                                     'Q344873': 'síndrome_de_dificultad_respiratoria_aguda',
                                     'Q188008': 'dificultad_respiratoria',
                                     'Q86': 'dolor_de_cabeza',
                                     'Q9690': 'cansancio',
                                     'Q40878': 'diarrea',
                                     'Q114085': 'congestión_nasal',
                                     'Q474959': 'mialgia',
                                     'Q647099': 'hemoptisis',
                                     'Q485831': 'linfopenia',
                                     'Q5445': 'anemia',
                                     'Q1076369': 'tormenta_de_citocinas',
                                    'Q3508755': 'infección_respiratoria_aguda'}
        #self.symptcols = ['Q38933','Q35805', 'Q767485','Q344873', 'Q188008', 'Q86','Q9690','Q40878','Q114085','Q474959','Q647099','Q485831','Q5445','Q1076369','Q3508755']

    def as_csv_row(self, MedNote_file):
        """Format JSON by MedNotesMiner to csv row of symptoms"""

        # read file and load json with symptoms
        with open(MedNote_file) as fp:
            medical_register = json.load(fp, encoding='utf-8')        
        #print(json.dumps(medical_register, ensure_ascii=False, encoding='utf-8', indent=2))

        # list presence/abscence of symptoms
        presence_or_absence = {code: str((code in medical_register['síntomas']))
                               for code, symptom in self.canonical_symptnames.items()}
        #print(presence_or_absence)
        return presence_or_absence

    def dir_to_csv(self, jsons_inputdir, sep=',', csvtable_outputdir="./"):
        """Read a set of JSON by MedNotesMiner to form a symptoms table"""
        symptcols_order = ['Q38933','Q35805', 'Q767485','Q344873', 'Q188008', 'Q86','Q9690','Q40878','Q114085','Q474959','Q647099','Q485831','Q5445','Q1076369','Q3508755']
        # header could be codes
        header = sep.join(['nota','fecha'])+sep+(sep.join([code for code in symptcols_order]))
        # or names
        # header = sep.join(['nota','fecha'])+sep+(sep.join([self.canonical_symptnames[c] for c in symptcols_order]))
        table = header+'\n'
        date = '22/04/2020'
        # walk inputdir to get the csv rows
        for (MedNote_path, MedNote_bname) in explore_dir(jsons_inputdir, yield_extension='JSON'):
            id_note = MedNote_bname.split('.')[0].split('_')[1]
            try:
                presence_absence_dic = self.as_csv_row(MedNote_path)
                print(id_note,'OK')
            except Exception as e:
                # This is because it may fail with some bad formated jsons.
                print(id_note,'KO')
                continue

            row = id_note+sep+date+sep+sep.join([presence_absence_dic[code]
                                               for code in symptcols_order])
            table += row+'\n'
        return table


if __name__ == '__main__':

    nota = "/Users/amolina/repo/covidminer/data/corte_SEDESA_22_abril_2020/Nota Médica_1587150149101.JSON"
    corte_dir = "/Users/amolina/repo/covidminer/data/corte_SEDESA_22_abril_2020/"
    parser = CovidJsonParser()
    #parser.as_csv_row(nota)
    csv_symptoms = parser.dir_to_csv(corte_dir)
    print(csv_symptoms)
